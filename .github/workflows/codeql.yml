# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: "CodeQL Analysis"

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '45 5 * * 4'

jobs:
  analyze:
    name: Analyze
    runs-on: windows-latest
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        language: [ 'csharp' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Check for Web.config
      shell: cmd
      run: |
        if not exist Web.config (
          echo ERROR: Web.config not found!
          exit 1
        )

    - name: Install .NET Framework 4.7.2 Developer Pack
      shell: cmd
      run: |
        choco install netfx-4.7.2-devpack -y

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.1

    - name: Copy System.Web.Extensions
      shell: pwsh
      run: |
        $sourcePath = "C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7.2\System.Web.Extensions.dll"
        $targetDir = "bin"
        $targetPath = Join-Path $targetDir "System.Web.Extensions.dll"
        New-Item -ItemType Directory -Path $targetDir -Force | Out-Null
        Copy-Item -Path $sourcePath -Destination $targetPath -Force
        Write-Output "✅ Copied System.Web.Extensions.dll to $targetPath"

    - name: Generate designer files
      shell: pwsh
      run: |
        $pages = Get-ChildItem -Recurse -Include *.aspx,*.ascx,*.master
        foreach ($page in $pages) {
          $content = Get-Content $page.FullName -Raw
          # Extract the Inherits attribute for the class name
          if ($content -match 'Inherits="([^"]+)"') {
            $className = $matches[1]
          } else {
            $baseName = [System.IO.Path]::GetFileNameWithoutExtension($page.Name)
            $className = $baseName -replace '[^a-zA-Z0-9_]', '_'
          }
          $designerPath = "$($page.FullName).designer.cs"
          
          # Determine the base class based on file extension
          $baseClass = switch ($page.Extension.ToLower()) {
            '.master' { 'System.Web.UI.MasterPage' }
            '.ascx' { 'System.Web.UI.UserControl' }
            default { 'System.Web.UI.Page' }
          }
          
          # Extract all control declarations with various patterns
          $controlMatches = @()
          $patterns = @(
            # Standard ASP.NET controls
            'asp:(\w+)[^>]*\bid\s*=\s*["'']([^"''\s]+)["''][^>]*\brunat\s*=\s*["'']server["'']',
            'asp:(\w+)[^>]*\brunat\s*=\s*["'']server["''][^>]*\bid\s*=\s*["'']([^"''\s]+)["'']',
            'asp:(\w+)[^>]*\bid\s*=\s*["'']([^"''\s]+)["'']',
            'asp:(\w+)[^>]*\brunat\s*=\s*["'']server["'']',
            # AJAX controls
            'asp:(\w+)[^>]*\bid\s*=\s*["'']([^"''\s]+)["''][^>]*\brunat\s*=\s*["'']server["'']\s*[^>]*>',
            'asp:(\w+)[^>]*\brunat\s*=\s*["'']server["''][^>]*\bid\s*=\s*["'']([^"''\s]+)["'']\s*[^>]*>',
            # HTML controls
            '<(\w+)[^>]*\bid\s*=\s*["'']([^"''\s]+)["''][^>]*\brunat\s*=\s*["'']server["'']',
            '<(\w+)[^>]*\brunat\s*=\s*["'']server["''][^>]*\bid\s*=\s*["'']([^"''\s]+)["'']',
            # Special case for ScriptManager
            '<asp:ScriptManager[^>]*\bid\s*=\s*["'']([^"''\s]+)["'']',
            '<asp:ScriptManager[^>]*\brunat\s*=\s*["'']server["''][^>]*\bid\s*=\s*["'']([^"''\s]+)["'']',
            '<asp:ScriptManager[^>]*\bid\s*=\s*["'']([^"''\s]+)["'']\s*runat\s*=\s*["'']server["'']',
            '<asp:ScriptManager[^>]*\brunat\s*=\s*["'']server["''][^>]*>',
            '<asp:ScriptManager[^>]*>'
          )
          foreach ($pattern in $patterns) {
            $controlMatches += Select-String -InputObject $content -Pattern $pattern -AllMatches
          }
          $controls = @{}
          foreach ($match in $controlMatches) {
            foreach ($m in $match.Matches) {
              $type = $m.Groups[1].Value
              $id = if ($m.Groups.Count -gt 2) { $m.Groups[2].Value } else { $type }
              $id = $id.Trim()
              if (-not $controls.ContainsKey($id)) {
                $fullType = switch ($type.ToLower()) {
                  'scriptmanager' { 'System.Web.UI.ScriptManager' }
                  'updatepanel' { 'System.Web.UI.UpdatePanel' }
                  'updateprogress' { 'System.Web.UI.UpdateProgress' }
                  'timer' { 'System.Web.UI.Timer' }
                  'label' { 'System.Web.UI.WebControls.Label' }
                  'textbox' { 'System.Web.UI.WebControls.TextBox' }
                  'button' { 'System.Web.UI.WebControls.Button' }
                  'gridview' { 'System.Web.UI.WebControls.GridView' }
                  'dropdownlist' { 'System.Web.UI.WebControls.DropDownList' }
                  'repeater' { 'System.Web.UI.WebControls.Repeater' }
                  'fileupload' { 'System.Web.UI.WebControls.FileUpload' }
                  'hyperlink' { 'System.Web.UI.WebControls.HyperLink' }
                  'datagrid' { 'System.Web.UI.WebControls.DataGrid' }
                  'panel' { 'System.Web.UI.WebControls.Panel' }
                  'literal' { 'System.Web.UI.WebControls.Literal' }
                  'image' { 'System.Web.UI.WebControls.Image' }
                  'imagebutton' { 'System.Web.UI.WebControls.ImageButton' }
                  'linkbutton' { 'System.Web.UI.WebControls.LinkButton' }
                  'checkbox' { 'System.Web.UI.WebControls.CheckBox' }
                  'radiobutton' { 'System.Web.UI.WebControls.RadioButton' }
                  'radiobuttonlist' { 'System.Web.UI.WebControls.RadioButtonList' }
                  'checkboxlist' { 'System.Web.UI.WebControls.CheckBoxList' }
                  'listbox' { 'System.Web.UI.WebControls.ListBox' }
                  'calendar' { 'System.Web.UI.WebControls.Calendar' }
                  'adrotator' { 'System.Web.UI.WebControls.AdRotator' }
                  'xml' { 'System.Web.UI.WebControls.Xml' }
                  'placeholder' { 'System.Web.UI.WebControls.PlaceHolder' }
                  'substitution' { 'System.Web.UI.WebControls.Substitution' }
                  'wizard' { 'System.Web.UI.WebControls.Wizard' }
                  'wizardstep' { 'System.Web.UI.WebControls.WizardStep' }
                  'multiview' { 'System.Web.UI.WebControls.MultiView' }
                  'view' { 'System.Web.UI.WebControls.View' }
                  'login' { 'System.Web.UI.WebControls.Login' }
                  'loginname' { 'System.Web.UI.WebControls.LoginName' }
                  'loginstatus' { 'System.Web.UI.WebControls.LoginStatus' }
                  'loginview' { 'System.Web.UI.WebControls.LoginView' }
                  'passwordrecovery' { 'System.Web.UI.WebControls.PasswordRecovery' }
                  'changepassword' { 'System.Web.UI.WebControls.ChangePassword' }
                  'createuserwizard' { 'System.Web.UI.WebControls.CreateUserWizard' }
                  'createuserwizardstep' { 'System.Web.UI.WebControls.CreateUserWizardStep' }
                  'completewizardstep' { 'System.Web.UI.WebControls.CompleteWizardStep' }
                  'content' { 'System.Web.UI.WebControls.Content' }
                  'contentplaceholder' { 'System.Web.UI.WebControls.ContentPlaceHolder' }
                  'html' { 'System.Web.UI.HtmlControls.HtmlGenericControl' }
                  'input' { 'System.Web.UI.HtmlControls.HtmlInputControl' }
                  'textarea' { 'System.Web.UI.HtmlControls.HtmlTextArea' }
                  'select' { 'System.Web.UI.HtmlControls.HtmlSelect' }
                  'table' { 'System.Web.UI.HtmlControls.HtmlTable' }
                  'tr' { 'System.Web.UI.HtmlControls.HtmlTableRow' }
                  'td' { 'System.Web.UI.HtmlControls.HtmlTableCell' }
                  'div' { 'System.Web.UI.HtmlControls.HtmlGenericControl' }
                  'span' { 'System.Web.UI.HtmlControls.HtmlGenericControl' }
                  'form' { 'System.Web.UI.HtmlControls.HtmlForm' }
                  'head' { 'System.Web.UI.HtmlControls.HtmlHead' }
                  'body' { 'System.Web.UI.HtmlControls.HtmlGenericControl' }
                  'title' { 'System.Web.UI.HtmlControls.HtmlTitle' }
                  'meta' { 'System.Web.UI.HtmlControls.HtmlMeta' }
                  'link' { 'System.Web.UI.HtmlControls.HtmlLink' }
                  'script' { 'System.Web.UI.HtmlControls.HtmlGenericControl' }
                  'style' { 'System.Web.UI.HtmlControls.HtmlGenericControl' }
                  default { "System.Web.UI.WebControls.$type" }
                }
                $controls[$id] = $fullType
              }
            }
          }
          
          # Special handling for ScriptManager - if it exists in the page but wasn't detected
          if ($content -match '<asp:ScriptManager') {
            # Try to find all ScriptManager controls and their IDs
            $scriptManagerPattern = '<asp:ScriptManager[^>]*((id|ID)\s*=\s*["'']([^"''\s]+)["''])?[^>]*>'
            $scriptManagerMatches = [regex]::Matches($content, $scriptManagerPattern)
            $hasScriptManagerField = $false
            if ($scriptManagerMatches.Count -gt 0) {
              foreach ($sm in $scriptManagerMatches) {
                $id = $sm.Groups[3].Value
                if ([string]::IsNullOrWhiteSpace($id)) { $id = 'ScriptManager1' }
                if ($id -eq 'ScriptManager') { $hasScriptManagerField = $true }
                if (-not $controls.ContainsKey($id)) {
                  $controls[$id] = 'System.Web.UI.ScriptManager'
                }
              }
            }
            # Always add a field named 'ScriptManager' if not already present
            if (-not $controls.ContainsKey('ScriptManager')) {
              $controls['ScriptManager'] = 'System.Web.UI.ScriptManager'
            }
          }
          
          if ($controls.Count -gt 0) {
            $lines = @(
              "#pragma warning disable 1591",
              "using System.Web.UI;",
              "using System.Web.UI.WebControls;",
              "using System.Web.UI.HtmlControls;",
              "public partial class $className : $baseClass {",
              ($controls.GetEnumerator() | ForEach-Object { "    protected global::$($_.Value) $($_.Key);" }),
              "}",
              "#pragma warning restore 1591"
            )
            Set-Content -Encoding UTF8 -Path $designerPath -Value $lines
            Write-Output "✅ Generated: $designerPath"
          }
        }

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: security-extended,security-and-quality
        config-file: ./.github/codeql/codeql-config.yml

    - name: Build with MSBuild
      shell: pwsh
      run: |
        echo "🛠️ Building solution..."
        msbuild App.csproj /p:Configuration=Release /p:Platform="Any CPU" /p:OutputPath="bin\Release" /p:GenerateSerializationAssemblies=Auto /p:DebugType=full /p:DebugSymbols=true /p:EmitCompilerGeneratedFiles=true /p:CompilerGeneratedFilesOutputPath="GeneratedFiles" /p:UseWPP_CopyWebApplication=true /p:OutDir="bin\Release\" /p:WebProjectOutputDir="bin\Release\" /p:GenerateTargetFrameworkAttribute=false /p:AdditionalLibPaths="C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7.2" /p:AdditionalReferences="System.Web.Extensions.dll" /p:DefineConstants="NETFRAMEWORK" /p:ReferencePath="C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7.2\System.Web.Extensions.dll" /p:CopyLocal=true /p:ReferencePath="bin\System.Web.Extensions.dll"

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"
